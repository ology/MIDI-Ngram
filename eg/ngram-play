#!/usr/bin/env perl

# Play the top repeated note phrases of a MIDI file or files and make
# a transition network diagram.
# Examples:
# perl ngram-play --files ~/Music/foo.mid --size 3 --max 0 --shuf --pause en
# perl ngram-play --files ~/Music/twinkle_twinkle.mid --size 2 --out '' --thresh 2

use strict;
use warnings;

use File::Find::Rule;
use Getopt::Long;
use GraphViz2;
use MIDI::Ngram;
use Music::Note;

my %opts = (
    dir     => undef,    # Directory of MIDI files
    files   => undef,    # MIDI files to process
    size    => 2,        # ngram size
    max     => 20,       # -1 for all records
    bpm     => 100,      # Beats per minute
    dura    => 'hn qn en', # Note durations
    out     => "$0.mid", # Output MIDI file
    pause   => '',       # Insert a rest after each phrase
    analyze => '',       # Analyze all channels
    loop    => 4,        # Times to choose a weighted phrase
    weight  => 0,        # Use weighted counts to play
    ranp    => 0,        # Random patch instead of all piano
    shuf    => 0,        # Shuffle phrases
    single  => 0,        # Allow phrases seen only once
    one     => 0,        # Analyze phrases into one list
    bounds  => 0,        # Show pitch bounds
    thresh  => 10,       # Threshold to show net edges
);
GetOptions( \%opts, 
    'help|?',
    'man',
    'dir=s',
    'files=s',
    'size=i',
    'max=i',
    'bpm=i',
    'dura=s',
    'out=s',
    'pause=s',
    'analyze=s',
    'loop=i',
    'weight',
    'ranp',
    'shuf',
    'single',
    'one',
    'bounds',
    'thresh=i',
) or die 'Failed GetOptions';

my @files;
@files = File::Find::Rule->file()->name('*.mid')->in($opts{dir})
    if $opts{dir};

# Turn string lists into arrayrefs
$opts{files}   = @files ? \@files : [ split /(?:\s+|\s*,\s*)/, $opts{files} ];
$opts{dura}    = [ split /(?:\s+|\s*,\s*)/, $opts{dura} ];
$opts{analyze} = [ split /(?:\s+|\s*,\s*)/, $opts{analyze} ];

# General MIDI patches that are audible and aren't horrible
my @patches = qw(
    0 1 2 4 5 7 8 9
    13 16 21 24 25 26
    32 34 35 40 42 60
    68 69 70 71 72 73
    74 79
);

my $mng = MIDI::Ngram->new(
    in_file         => $opts{files},
    ngram_size      => $opts{size},
    max_phrases     => $opts{max},
    bpm             => $opts{bpm},
    durations       => $opts{dura},
    out_file        => $opts{out},
    pause_duration  => $opts{pause},
    analyze         => $opts{analyze},
    random_patch    => $opts{ranp},
    loop            => $opts{loop},
    weight          => $opts{weight},
    shuffle_phrases => $opts{shuf},
    single_phrases  => $opts{single},
    one_channel     => $opts{one},
    bounds          => $opts{bounds},
    patches         => \@patches,
);

my $analysis = $mng->process;
print $analysis;

if ( $opts{out} ) {
    my $playback = $mng->populate;
    print $playback;

    $mng->write;
}

my $g = GraphViz2->new(
    global => { directed => 1 },
    node   => { shape => 'oval' },
    edge   => { color => 'grey' },
);

my %nodes;
my %edges;

for my $edge ( keys %{ $mng->net } ) {
    next unless $mng->net->{$edge} >= $opts{thresh};

    # Split the edge in two
    my ($i, $j) = split '-', $edge;

    # Convert midinum to ISO in the edge
    my @notes;
    for my $n (split ' ', $i) {
        my $note = Music::Note->new( $n, 'midinum' );
        push @notes, $note->format('ISO');
    }
    $i = join ' ', @notes;
    @notes = ();
    for my $n (split ' ', $j) {
        my $note = Music::Note->new( $n, 'midinum' );
        push @notes, $note->format('ISO');
    }
    $j = join ' ', @notes;

    $g->add_node(name => $i)
        unless $nodes{$i}++;
    $g->add_node(name => $j)
        unless $nodes{$j}++;
    $g->add_edge(from => $i, to => $j, label => $mng->net->{$edge})
        unless $edges{$edge}++;
}

$g->run( format => 'png', output_file => $0 . '.png' );
